# -*- coding: utf-8 -*-
"""QA_new_layer_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1S4tM9aUQlO4UJnVIEq434MwgnA3ecR8x
"""

import pandas as pd
import re

def extract_unique_entities(all_df):
  unique_ent_map = {}
  all_idx = pd.unique(all_df["idx"])
  all_entity_types = pd.unique(all_df["entity"])

  for idx in all_idx:
    unique_ent_map[idx] = {}
    this_idx_df = all_df[all_df["idx"] == idx]

    for entity in all_entity_types:
      unique_ent_map[idx][entity] = {}
      this_ent_df = this_idx_df[this_idx_df["entity"] == entity].sort_values("score", ascending=True)
      
      for i, row in this_ent_df.iterrows():
        unique_ent_map[idx][entity][row.at["response"]] = row.at["score"]
  return unique_ent_map


def get_q_by_entity(in_entity, in_value:str):
  gv_entity = {}
  if in_entity == "program_name":
    gv_entity = {"client": [f"Who does {in_value} offer services to?", 
                        f"Who is {in_value} helping?"], 
                 "need_satisifer": [f"What does {in_value} provide?",
                        f"List all that is offered by {in_value}."], 
                 "outcome": [f"What does {in_value} achieve?",
                        f"What is the goal of {in_value}?"], 
                 "catchment_area": [f"Where is {in_value} offered at?",
                        f"What is the location of {in_value}?"]}

  if in_entity == "client":
    in_value = re.sub(r'^to ', "", in_value)
    gv_entity = {"program_name": [f"Which program provides services to {in_value}?",
                        f"What program does {in_value} benefit from?"], 
                 "need_satisifer": [f"What services help {in_value}?",
                        f"List all that is offered to {in_value}."], 
                 "outcome": [f"How does the program help {in_value}?",
                        f"What do the services aim to do to {in_value}?"], 
                 "catchment_area": [f"Where is the program offered to {in_value}?"]}

  if in_entity == "need_satisifer":
    gv_entity = {"program_name": [f"What program offers {in_value}?",
                        f"Who is the provider of {in_value}?"], 
                 "client": [f"Who receives {in_value}?",
                        f"Who is the program helping through {in_value}?"], 
                 "outcome": [f"What does {in_value} aim to do?",
                        f"What does the program achieve through {in_value}?"], 
                 "catchment_area": [f"Where is {in_value} provided?"]}

  if in_entity == "outcome":   
    in_value = re.sub(r'^to ', "", in_value)           
    gv_entity = {"program_name": [f"Which program contributes to {in_value}?",
                        f"Which program allows {in_value}?"], 
                 "client": [f"Who now needs {in_value}?",
                        f"Who does the program help with {in_value}?"], 
                 "need_satisifer": [f"What services aim to {in_value}?",
                        f"What does the program offer in order to {in_value}?"], 
                 "catchment_area": [f"Where does the program contributes to {in_value}?"]}

  if in_entity == "catchment_area":      
    in_value = re.sub(r'^in ', "", in_value)       
    gv_entity = {"program_name": [f"Who provides in location {in_value}?"], 
                 "client": [f"Who benefits from the program located in {in_value}?",
                        f"Who receives services located in {in_value}?"], 
                 "need_satisifer": [f"What services are offered in location {in_value}?",
                        f"List all that the program provides in {in_value}."], 
                 "outcome": [f"How do these services contribute in {in_value}?",
                        f"List all that the program achieves in {in_value}."]}

  return gv_entity

def create_layer1_given(new_all_in_entities):
  this_qs = {}
  for idx in new_all_in_entities:
    this_qs[idx] = {}
    for in_entity in new_all_in_entities[idx]:
      this_qs[idx][in_entity] = {}
      for response in new_all_in_entities[idx][in_entity]:
        custom_questions = get_q_by_entity(in_entity, response)
        score = new_all_in_entities[idx][in_entity][response]
        this_qs[idx][in_entity][response] = [custom_questions, score]

  return this_qs

