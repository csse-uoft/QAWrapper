# -*- coding: utf-8 -*-
"""QA_new_layer_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1S4tM9aUQlO4UJnVIEq434MwgnA3ecR8x
"""

import pandas as pd
import re
#
# filename = "drive/MyDrive/NLP Project/data/QA_results/QA layer/answers/rank_results/HS_layer0_fixed_eval.xlsx"
# xls = xlrd.open_workbook(filename, on_demand=True)
# sn = xls.sheet_names()
# concat_dfs = []
# for sheet in sn:
#   this_df = pd.read_excel(filename, sheet_name = sheet)[["idx", "qid", "response", "score", "text"]]
#   this_df["entity"] = sheet
#   concat_dfs.append(this_df)
# all_df_keywords = pd.concat(concat_dfs, ignore_index=True)
# all_df_keywords

ENTITIES = [
  "program_name",
  "client",
  "need_satisfier",
  "outcome",
  "catchment_area"
]

def extract_unique_entities(all_df):
  unique_ent_map = {}
  all_idx = pd.unique(all_df["idx"])
  all_entity_types = pd.unique(all_df["entity"])

  for idx in all_idx:
    unique_ent_map[idx] = {}
    this_idx_df = all_df[all_df["idx"] == idx]

    for entity in all_entity_types:
      unique_ent_map[idx][entity] = {}
      this_ent_df = this_idx_df[this_idx_df["entity"] == entity].sort_values("score", ascending=True)
      
      for i, row in this_ent_df.iterrows():
        unique_ent_map[idx][entity][row.at["response"]] = row.at["score"]
  return unique_ent_map

# all_keywords_dict = extract_unique_entities(all_df_keywords)
# all_keywords_dict

def get_q_by_entity(entity_type, curr_entity:str):
  gv_entity = {}
  if entity_type == "program_name":
    gv_entity = {"client": [f"Who does {curr_entity} offer services to?", 
                        f"Who is {curr_entity} helping?"], 
                 "need_satisifer": [f"What does {curr_entity} provide?",
                        f"List all that is offered by {curr_entity}."], 
                 "outcome": [f"What does {curr_entity} achieve?",
                        f"What is the goal of {curr_entity}?"], 
                 "catchment_area": [f"Where is {curr_entity} offered at?",
                        f"What is the location of {curr_entity}?"]}

  if entity_type == "client":
    curr_entity = re.sub(r'^to ', "", curr_entity)
    gv_entity = {"program": [f"Which program provides services to {curr_entity}?",
                        f"What program does {curr_entity} benefit from?"], 
                 "need_satisifer": [f"What services help {curr_entity}?",
                        f"List all that is offered to {curr_entity}."], 
                 "outcome": [f"How does the program help {curr_entity}?",
                        f"What do the services aim to do to {curr_entity}?"], 
                 "catchment_area": [f"Where is the program offered to {curr_entity}?"]}

  if entity_type == "need_satisifer":
    gv_entity = {"program": [f"What program offers {curr_entity}?",
                        f"Who is the provider of {curr_entity}?"], 
                 "client": [f"Who receives {curr_entity}?",
                        f"Who is the program helping through {curr_entity}?"], 
                 "outcome": [f"What does {curr_entity} aim to do?",
                        f"What does the program achieve through {curr_entity}?"], 
                 "catchment_area": [f"Where is {curr_entity} provided?"]}

  if entity_type == "no":   
    curr_entity = re.sub(r'^to ', "", curr_entity)           
    gv_entity = {"program": [f"Which program contributes to {curr_entity}?",
                        f"Which program allows {curr_entity}?"], 
                 "client": [f"Who now needs {curr_entity}?",
                        f"Who does the program help with {curr_entity}?"], 
                 "need_satisifer": [f"What services aim to {curr_entity}?",
                        f"What does the program offer in order to {curr_entity}?"], 
                 "catchment_area": [f"Where does the program contributes to {curr_entity}?"]}

  if entity_type == "catchment_area":      
    curr_entity = re.sub(r'^in ', "", curr_entity)       
    gv_entity = {"program": [f"Who provides in location {curr_entity}?"], 
                 "client": [f"Who benefits from the program located in {curr_entity}?",
                        f"Who receives services located in {curr_entity}?"], 
                 "need_satisifer": [f"What services are offered in location {curr_entity}?",
                        f"List all that the program provides in {curr_entity}."], 
                 "outcome": [f"How do these services contribute in {curr_entity}?",
                        f"List all that the program achieves in {curr_entity}."]}

  return gv_entity

def create_layer1_given(new_all_correct_entities):
  this_qs = {}
  for idx in new_all_correct_entities:
    this_qs[idx] = {}
    for entity in new_all_correct_entities[idx]:
      this_qs[idx][entity] = {}
      for response in new_all_correct_entities[idx][entity]:
        custom_questions = get_q_by_entity(entity, response)
        score = new_all_correct_entities[idx][entity][response]
        this_qs[idx][entity][response] = [custom_questions, score]

  return this_qs

